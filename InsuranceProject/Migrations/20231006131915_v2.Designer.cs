// <auto-generated />
using System;
using InsuranceProject.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InsuranceProject.Migrations
{
    [DbContext(typeof(ModelContext))]
    [Migration("20231006131915_v2")]
    partial class v2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AgentCustomer", b =>
                {
                    b.Property<int>("AgentsAgentId")
                        .HasColumnType("int");

                    b.Property<int>("CustomersCustomerId")
                        .HasColumnType("int");

                    b.HasKey("AgentsAgentId", "CustomersCustomerId");

                    b.HasIndex("CustomersCustomerId");

                    b.ToTable("AgentCustomer");
                });

            modelBuilder.Entity("InsurancePolicyInsuranceScheme", b =>
                {
                    b.Property<int>("InsurancePoliciesPocilyId")
                        .HasColumnType("int");

                    b.Property<int>("InsuranceSchemesSchemeId")
                        .HasColumnType("int");

                    b.HasKey("InsurancePoliciesPocilyId", "InsuranceSchemesSchemeId");

                    b.HasIndex("InsuranceSchemesSchemeId");

                    b.ToTable("InsurancePolicyInsuranceScheme");
                });

            modelBuilder.Entity("InsuranceProject.Model.Actors.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<string>("AdminFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AdminLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AdminId");

                    b.HasIndex("UserId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("InsuranceProject.Model.Actors.Agent", b =>
                {
                    b.Property<int>("AgentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgentId"));

                    b.Property<string>("AgentFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AgentLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("CommissionEarned")
                        .HasColumnType("float");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Qualification")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AgentId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("InsuranceProject.Model.Actors.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nominee")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NomineeRelation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("InsuranceProject.Model.Actors.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentId"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("DocumentFile")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("DocumentId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("InsuranceProject.Model.Actors.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmployeeLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId");

                    b.HasIndex("AdminId");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("InsuranceProject.Model.Actors.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("InsuranceProject.Model.Actors.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("InsuranceProject.Model.Holdings.Claim", b =>
                {
                    b.Property<int>("ClaimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClaimId"));

                    b.Property<string>("BankAccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankIFSCCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<double>("ClaimAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("InsurancePolicyPocilyId")
                        .HasColumnType("int");

                    b.Property<int?>("PocilyId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ClaimId");

                    b.HasIndex("InsurancePolicyPocilyId");

                    b.ToTable("Claim");
                });

            modelBuilder.Entity("InsuranceProject.Model.Holdings.InsurancePlan", b =>
                {
                    b.Property<int>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlanId"));

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("PlanId");

                    b.HasIndex("AdminId");

                    b.ToTable("InsurancePlans");
                });

            modelBuilder.Entity("InsuranceProject.Model.Holdings.InsurancePolicy", b =>
                {
                    b.Property<int>("PocilyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PocilyId"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("InsurancePlanPlanId")
                        .HasColumnType("int");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MaturityDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PlanId")
                        .HasColumnType("int");

                    b.Property<int>("PolicyNo")
                        .HasColumnType("int");

                    b.Property<double>("PremiumAmount")
                        .HasColumnType("float");

                    b.Property<string>("PremiumType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<double>("SumAssured")
                        .HasColumnType("float");

                    b.HasKey("PocilyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InsurancePlanPlanId");

                    b.ToTable("InsurancePolicies");
                });

            modelBuilder.Entity("InsuranceProject.Model.Holdings.InsuranceScheme", b =>
                {
                    b.Property<int>("SchemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SchemeId"));

                    b.Property<int>("InsurancePlanPlanId")
                        .HasColumnType("int");

                    b.Property<int?>("PlanId")
                        .HasColumnType("int");

                    b.Property<string>("SchemeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("SchemeId");

                    b.HasIndex("InsurancePlanPlanId");

                    b.ToTable("InsuranceSchemes");
                });

            modelBuilder.Entity("InsuranceProject.Model.Holdings.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("InsurancePolicyPocilyId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PocilyId")
                        .HasColumnType("int");

                    b.Property<double>("Tax")
                        .HasColumnType("float");

                    b.Property<double>("TotalPayment")
                        .HasColumnType("float");

                    b.HasKey("PaymentId");

                    b.HasIndex("InsurancePolicyPocilyId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("InsuranceProject.Model.Holdings.Query", b =>
                {
                    b.Property<int>("QueryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QueryId"));

                    b.Property<DateTime>("ContactDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Reply")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("QueryId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Queries");
                });

            modelBuilder.Entity("InsuranceProject.Model.Holdings.SchemeDetails", b =>
                {
                    b.Property<int>("DetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetailId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<double>("InstallmentCommRatio")
                        .HasColumnType("float");

                    b.Property<int>("InsuranceSchemeSchemeId")
                        .HasColumnType("int");

                    b.Property<int>("MaxAge")
                        .HasColumnType("int");

                    b.Property<double>("MaxAmount")
                        .HasColumnType("float");

                    b.Property<int>("MaxInvestTime")
                        .HasColumnType("int");

                    b.Property<int>("MinAge")
                        .HasColumnType("int");

                    b.Property<double>("MinAmount")
                        .HasColumnType("float");

                    b.Property<int>("MinInvestTime")
                        .HasColumnType("int");

                    b.Property<double>("ProfitRatio")
                        .HasColumnType("float");

                    b.Property<double>("RegistrationCommRatio")
                        .HasColumnType("float");

                    b.Property<int?>("SchemeId")
                        .HasColumnType("int");

                    b.Property<string>("SchemeImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("DetailId");

                    b.HasIndex("InsuranceSchemeSchemeId");

                    b.ToTable("SchemeDetails");
                });

            modelBuilder.Entity("AgentCustomer", b =>
                {
                    b.HasOne("InsuranceProject.Model.Actors.Agent", null)
                        .WithMany()
                        .HasForeignKey("AgentsAgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InsuranceProject.Model.Actors.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomersCustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InsurancePolicyInsuranceScheme", b =>
                {
                    b.HasOne("InsuranceProject.Model.Holdings.InsurancePolicy", null)
                        .WithMany()
                        .HasForeignKey("InsurancePoliciesPocilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InsuranceProject.Model.Holdings.InsuranceScheme", null)
                        .WithMany()
                        .HasForeignKey("InsuranceSchemesSchemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InsuranceProject.Model.Actors.Admin", b =>
                {
                    b.HasOne("InsuranceProject.Model.Actors.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InsuranceProject.Model.Actors.Agent", b =>
                {
                    b.HasOne("InsuranceProject.Model.Actors.Employee", "Employee")
                        .WithMany("Agents")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("InsuranceProject.Model.Actors.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Employee");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InsuranceProject.Model.Actors.Document", b =>
                {
                    b.HasOne("InsuranceProject.Model.Actors.Customer", "Customer")
                        .WithMany("Documents")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("InsuranceProject.Model.Actors.Employee", b =>
                {
                    b.HasOne("InsuranceProject.Model.Actors.Admin", "Admin")
                        .WithMany("Employees")
                        .HasForeignKey("AdminId");

                    b.HasOne("InsuranceProject.Model.Actors.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Admin");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InsuranceProject.Model.Actors.User", b =>
                {
                    b.HasOne("InsuranceProject.Model.Actors.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("InsuranceProject.Model.Holdings.Claim", b =>
                {
                    b.HasOne("InsuranceProject.Model.Holdings.InsurancePolicy", "InsurancePolicy")
                        .WithMany("Claims")
                        .HasForeignKey("InsurancePolicyPocilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InsurancePolicy");
                });

            modelBuilder.Entity("InsuranceProject.Model.Holdings.InsurancePlan", b =>
                {
                    b.HasOne("InsuranceProject.Model.Actors.Admin", "Admin")
                        .WithMany("InsurancePlans")
                        .HasForeignKey("AdminId");

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("InsuranceProject.Model.Holdings.InsurancePolicy", b =>
                {
                    b.HasOne("InsuranceProject.Model.Actors.Customer", "Customer")
                        .WithMany("InsurancePolicies")
                        .HasForeignKey("CustomerId");

                    b.HasOne("InsuranceProject.Model.Holdings.InsurancePlan", "InsurancePlan")
                        .WithMany("InsurancePolicies")
                        .HasForeignKey("InsurancePlanPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("InsurancePlan");
                });

            modelBuilder.Entity("InsuranceProject.Model.Holdings.InsuranceScheme", b =>
                {
                    b.HasOne("InsuranceProject.Model.Holdings.InsurancePlan", "InsurancePlan")
                        .WithMany("InsuranceSchemes")
                        .HasForeignKey("InsurancePlanPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InsurancePlan");
                });

            modelBuilder.Entity("InsuranceProject.Model.Holdings.Payment", b =>
                {
                    b.HasOne("InsuranceProject.Model.Holdings.InsurancePolicy", "InsurancePolicy")
                        .WithMany("Payments")
                        .HasForeignKey("InsurancePolicyPocilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InsurancePolicy");
                });

            modelBuilder.Entity("InsuranceProject.Model.Holdings.Query", b =>
                {
                    b.HasOne("InsuranceProject.Model.Actors.Customer", "Customer")
                        .WithMany("Queries")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("InsuranceProject.Model.Holdings.SchemeDetails", b =>
                {
                    b.HasOne("InsuranceProject.Model.Holdings.InsuranceScheme", "InsuranceScheme")
                        .WithMany("SchemeDetails")
                        .HasForeignKey("InsuranceSchemeSchemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InsuranceScheme");
                });

            modelBuilder.Entity("InsuranceProject.Model.Actors.Admin", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("InsurancePlans");
                });

            modelBuilder.Entity("InsuranceProject.Model.Actors.Customer", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("InsurancePolicies");

                    b.Navigation("Queries");
                });

            modelBuilder.Entity("InsuranceProject.Model.Actors.Employee", b =>
                {
                    b.Navigation("Agents");
                });

            modelBuilder.Entity("InsuranceProject.Model.Holdings.InsurancePlan", b =>
                {
                    b.Navigation("InsurancePolicies");

                    b.Navigation("InsuranceSchemes");
                });

            modelBuilder.Entity("InsuranceProject.Model.Holdings.InsurancePolicy", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("InsuranceProject.Model.Holdings.InsuranceScheme", b =>
                {
                    b.Navigation("SchemeDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
